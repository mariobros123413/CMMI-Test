/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Presentacion;

import Negocio.Area_Proceso;
import Negocio.BC_Evaluacion_General;
import Negocio.CustomIconTreeCellRenderer;
import Negocio.Instancia;
import Negocio.Nivel_Madurez;
import Negocio.Objetivo;
import Negocio.Observacion;
import Negocio.PDF;
import Negocio.Practica;
import Negocio.VariablesGoblales;
import Paneles.CambiaPanel;
import static Paneles.Metodos.cambiarPanel;
import Paneles.Pnl_Evaluacion_Area_Proceso;
import Paneles.Pnl_Evaluacion_Instancia;
import Paneles.Pnl_home;
import Paneles.Pnl_Evaluacion_Nivel;
import Paneles.Pnl_Evaluacion_Objetivo;
import Paneles.Pnl_Evaluacion_Practica;
import com.itextpdf.text.DocumentException;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.ObjectInputStream;

import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.JTable;
import javax.swing.JTree;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;

/**
 *
 * @author Usuario
 */
public class Frm_Principal extends javax.swing.JFrame {

    public static int rowindexCaption = -1;
    public Frm_inicio_evaluacion frm_inicio_evaluacion;
    public Frm_Observacion frm_Observacion;
    public static BC_Evaluacion_General archivo = null;
    public ArrayList<Observacion> listaObservacion = null;
    public Paneles.Pnl_home pnl_home = new Pnl_home();
    public Pnl_Evaluacion_Nivel pnl_Evaluacion_Nivel = new Pnl_Evaluacion_Nivel();
    public Pnl_Evaluacion_Area_Proceso pnl_Evaluacion_Area_Proceso = new Pnl_Evaluacion_Area_Proceso();
    public Paneles.Pnl_Evaluacion_Objetivo pnl_Evaluacion_Objetivo = new Pnl_Evaluacion_Objetivo();
    public Paneles.Pnl_Evaluacion_Practica pnl_Evaluacion_Practica = new Pnl_Evaluacion_Practica();
    public Paneles.Pnl_Evaluacion_Instancia pnl_Evaluacion_Instancia = new Pnl_Evaluacion_Instancia();
    public String titulo;

    /**
     * Creates new form Principal
     */
    public Frm_Principal() throws IOException {
        super("Inicio de evaluacion");

        frm_inicio_evaluacion = null;
        frm_Observacion = null;
        titulo = "";

        initComponents();
        Frm_Principal.jTree_Arbol.setCellRenderer(new CustomIconTreeCellRenderer());
        this.setLocationRelativeTo(null);
        cambiarPanel(pnlPrincipalContenedor, pnl_home);

        DefaultMutableTreeNode raiz = new DefaultMutableTreeNode("Raíz"); // Crear un nodo raíz opcional
        DefaultTreeModel modelo = new DefaultTreeModel(raiz); // Crear un nuevo modelo de árbol
        jTree_Arbol.setModel(modelo); // Establecer el modelo en el JTree
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu_observacion_nivel = new javax.swing.JPopupMenu();
        Evaluar = new javax.swing.JMenuItem();
        jPanel1 = new javax.swing.JPanel();
        Btn_nueva_evaluacion = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton_observaciones = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jPanel_arbol_de_Despliegue = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTree_Arbol = new javax.swing.JTree();
        pnlPrincipalContenedor = new javax.swing.JPanel();

        Evaluar.setText("Evaluar");
        Evaluar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EvaluarActionPerformed(evt);
            }
        });
        jPopupMenu_observacion_nivel.add(Evaluar);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        Btn_nueva_evaluacion.setText("Nueva Evaluacion");
        Btn_nueva_evaluacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Btn_nueva_evaluacionActionPerformed(evt);
            }
        });
        jPanel1.add(Btn_nueva_evaluacion, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 6, 140, -1));

        jButton2.setText("Abrir");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(152, 6, 100, -1));

        jButton_observaciones.setText("Observaciones");
        jButton_observaciones.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_observacionesActionPerformed(evt);
            }
        });
        jPanel1.add(jButton_observaciones, new org.netbeans.lib.awtextra.AbsoluteConstraints(258, 6, 130, -1));

        jButton3.setText("Evaluacion General");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 10, 160, -1));

        jButton4.setText("Reporte");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 10, -1, -1));

        jButton1.setText("Marcar Todos");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 10, 130, -1));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 920, 40));

        jPanel_arbol_de_Despliegue.setForeground(new java.awt.Color(153, 255, 255));
        jPanel_arbol_de_Despliegue.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTree_Arbol.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTree_ArbolMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(jTree_Arbol);

        jPanel_arbol_de_Despliegue.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 15, 398, 590));

        getContentPane().add(jPanel_arbol_de_Despliegue, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, 410, 460));

        pnlPrincipalContenedor.setBackground(new java.awt.Color(255, 255, 255));
        pnlPrincipalContenedor.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 2));
        pnlPrincipalContenedor.setLayout(new javax.swing.BoxLayout(pnlPrincipalContenedor, javax.swing.BoxLayout.LINE_AXIS));
        getContentPane().add(pnlPrincipalContenedor, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 55, 530, 590));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        String archivo2 = "objeto_serializado.CMMI";
        
        try {
            // Crear un flujo de entrada de archivo
            FileInputStream fileIn = new FileInputStream(archivo2);
            // Crear un flujo de entrada de objetos
            ObjectInputStream in = new ObjectInputStream(fileIn);
            // Leer el objeto serializado desde el archivo
            BC_Evaluacion_General objeto = (BC_Evaluacion_General) in.readObject();
            archivo = objeto;
            // Cerrar los flujos
            in.close();
            fileIn.close();
            // Mostrar el objeto deserializado
            System.out.println("Objeto deserializado: " + objeto.getNombre_organizacion());
        } catch (IOException | ClassNotFoundException e) {
            e.printStackTrace();
        }
        DefaultMutableTreeNode raiz = (DefaultMutableTreeNode) Frm_Principal.jTree_Arbol.getModel().getRoot();
        raiz.setUserObject(archivo.getNombre_organizacion());
        for (Nivel_Madurez nivel : archivo.getNiveles()) {
            DefaultMutableTreeNode nodoNivel = new DefaultMutableTreeNode(nivel.getNombre_nivel_madurez());

            // Convertimos cada área de proceso en un nodo hijo del nivel
            try {
                for (Area_Proceso proceso : nivel.getArea_proceso()) {
                    DefaultMutableTreeNode nodoProceso = new DefaultMutableTreeNode(proceso.getNombre_area_proceso());

                    // Agregamos los objetivos específicos
                    try {
                        for (Objetivo objetivoE : proceso.getListaObjetivosEspecificos()) {
                            DefaultMutableTreeNode nodoObjetivoE = new DefaultMutableTreeNode(objetivoE.getNombre_objetivo());
                            // Agregamos las prácticas y las instancias
                            for (Practica practica : objetivoE.getListaPracticas()) {
                                System.out.println("practica:" + practica.getNombre_practica());
                                DefaultMutableTreeNode nodoPractica = new DefaultMutableTreeNode(practica.getNombre_practica());

                                for (Instancia instancia : practica.getListaInstancia()) {
                                    DefaultMutableTreeNode nodoInstancia = new DefaultMutableTreeNode(instancia.getNombre_instancia());
                                    nodoPractica.add(nodoInstancia);

                                }

                                nodoObjetivoE.add(nodoPractica);
                            }

                            nodoProceso.add(nodoObjetivoE);
                        }
                    } catch (Exception e) {
                    }
                    // Agregamos los objetivos genéricos
                    for (Objetivo objetivoG : proceso.getListaObjetivosGenericos()) {
                        DefaultMutableTreeNode nodoObjetivoG = new DefaultMutableTreeNode(objetivoG.getNombre_objetivo());
                        // Agregamos las prácticas y las instancias
                        try {
                            for (Practica practica : objetivoG.getListaPracticas()) {
                                DefaultMutableTreeNode nodoPractica = new DefaultMutableTreeNode(practica.getNombre_practica());
                                System.out.println("practica:" + practica.getNombre_practica());
                                for (Instancia instancia : practica.getListaInstancia()) {
                                    DefaultMutableTreeNode nodoInstancia = new DefaultMutableTreeNode(instancia.getNombre_instancia());
                                    nodoPractica.add(nodoInstancia);
                                }

                                nodoObjetivoG.add(nodoPractica);
                            }
                        } catch (Exception e) {
                        }
                        nodoProceso.add(nodoObjetivoG);
                    }

                    nodoNivel.add(nodoProceso);
                }

            } catch (Exception e) {
            }
            raiz.add(nodoNivel);
        }
        DefaultTreeModel modelo = new DefaultTreeModel(raiz); // Crea un nuevo DefaultTreeModel con la raíz personalizada
        Frm_Principal.jTree_Arbol.setModel(modelo); // Establece el modelo en el JTree
    }//GEN-LAST:event_jButton2ActionPerformed

    private void Btn_nueva_evaluacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Btn_nueva_evaluacionActionPerformed
        try {
            if (frm_inicio_evaluacion != null) {
                frm_inicio_evaluacion.dispose();
            }
            archivo = new BC_Evaluacion_General();

            frm_inicio_evaluacion = new Frm_inicio_evaluacion(archivo);
            frm_inicio_evaluacion.setLocationRelativeTo(null);
            frm_inicio_evaluacion.setVisible(true);
            frm_inicio_evaluacion.setTitle(this.getTitle() + " [ Sin guardar ]");
            System.out.println("eeee");
        } catch (Exception ex) {
            Logger.getLogger(Frm_Principal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_Btn_nueva_evaluacionActionPerformed

    private void jButton_observacionesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_observacionesActionPerformed
        System.out.println("nombre:" + archivo.getNombre_organizacion());
        try {
            if (archivo.getListaObservaciones() != null) {
                System.out.println("enn:" + archivo.getListaObservaciones().size());
                listaObservacion = archivo.getListaObservaciones();
            } else {
                listaObservacion = new ArrayList();
                try {
                    System.out.println("enn2:" + archivo.getListaObservaciones().size());
                } catch (Exception e) {
                }

            }
        } catch (Exception e) {
        }
        frm_Observacion = new Frm_Observacion(listaObservacion);
        frm_Observacion.setLocationRelativeTo(null);
        frm_Observacion.setVisible(true);
        frm_Observacion.setTitle("Administracion de Observaciones");

    }//GEN-LAST:event_jButton_observacionesActionPerformed

    private void jTree_ArbolMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTree_ArbolMouseReleased
        int r = jTree_Arbol.getRowForLocation(evt.getX(), evt.getY());
        System.out.println("RRRR:" + r);
        if (r >= 0 && r < jTree_Arbol.getRowCount()) { // Verificar si el índice de la fila está dentro del rango válido
            jTree_Arbol.setSelectionRow(r); // Seleccionar la fila donde se hizo clic
        } else {
            jTree_Arbol.clearSelection(); // Si no se hizo clic en ninguna fila válida, limpiar la selección
        }
        int[] selectedRows = jTree_Arbol.getSelectionRows(); // Obtener los índices de las filas seleccionadas
        int rowindexCaption = -1; // Inicializar la variable para el índice de la fila seleccionada

        if (selectedRows != null && selectedRows.length > 0) { // Verificar si hay filas seleccionadas
            rowindexCaption = selectedRows[0]; // Obtener el índice de la primera fila seleccionada
            System.out.println("RRRddddddR:" + rowindexCaption);
            VariablesGoblales.puntero = rowindexCaption;
        }

        if (rowindexCaption < 0) // Verificar si no se seleccionó ninguna fila
        {
            return;
        }

// Obtener el texto del elemento seleccionado
        Object selectedNode = jTree_Arbol.getLastSelectedPathComponent();
        if (selectedNode != null && selectedNode instanceof DefaultMutableTreeNode) {
            DefaultMutableTreeNode node = (DefaultMutableTreeNode) selectedNode;
            String selectedText = node.getUserObject().toString();
            System.out.println("Texto del elemento seleccionado: " + selectedText);
            titulo = selectedText;

        }
// Verificar si el evento del mouse es un disparador de menú emergente y si el componente es una instancia de JTree
        if (evt.isPopupTrigger() && evt.getComponent() instanceof JTree) {
            try {
                jPopupMenu_observacion_nivel.show(evt.getComponent(), evt.getX(), evt.getY()); // Mostrar el menú emergente en la posición del clic del mouse
            } catch (Exception e) {
                e.printStackTrace(); // Manejar cualquier excepción que ocurra al mostrar el menú emergente
            }

        }


    }//GEN-LAST:event_jTree_ArbolMouseReleased

    private void EvaluarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EvaluarActionPerformed
        char primerCaracter = titulo.charAt(0);

        if (primerCaracter == 'N') {
            cambiarPanel(pnlPrincipalContenedor, pnl_Evaluacion_Nivel);

            char id = titulo.charAt(1);

            ArrayList<Nivel_Madurez> listaNiveles = archivo.getNiveles();
            for (int i = 0; i < listaNiveles.size(); i++) {

                if (id == '1') {
                    Nivel_Madurez nm = listaNiveles.get(0);
                    pnl_Evaluacion_Nivel.nivel_Madurez = nm;
                    pnl_Evaluacion_Nivel.jLabel_titulo.setText("Nivel " + id + ": Inicio");
                    pnl_Evaluacion_Nivel.jTextArea_descripcion.setText(listaNiveles.get(0).getDescripcion_nivel_madurez());

                }
                  if (id == '2') {
                    Nivel_Madurez nm = listaNiveles.get(1);
                    pnl_Evaluacion_Nivel.nivel_Madurez = nm;
                    pnl_Evaluacion_Nivel.jLabel_titulo.setText("Nivel " + id + ": Gestionado");
                    pnl_Evaluacion_Nivel.jTextArea_descripcion.setText(listaNiveles.get(0).getDescripcion_nivel_madurez());

                }
                if (id == '3') {
                    Nivel_Madurez nm = listaNiveles.get(2);
                    pnl_Evaluacion_Nivel.nivel_Madurez = nm;
                    pnl_Evaluacion_Nivel.jLabel_titulo.setText("Nivel " + id + ": Definido");
                    pnl_Evaluacion_Nivel.jTextArea_descripcion.setText(listaNiveles.get(1).getDescripcion_nivel_madurez());
                }

                if (id == '4') {
                    Nivel_Madurez nm = listaNiveles.get(3);
                    pnl_Evaluacion_Nivel.nivel_Madurez = nm;
                    pnl_Evaluacion_Nivel.jLabel_titulo.setText("Nivel " + id + ": Gestionado cuantitativamente");
                    pnl_Evaluacion_Nivel.jTextArea_descripcion.setText(listaNiveles.get(2).getDescripcion_nivel_madurez());
                }

                if (id == '5') {
                    Nivel_Madurez nm = listaNiveles.get(4);
                    pnl_Evaluacion_Nivel.nivel_Madurez = nm;
                    pnl_Evaluacion_Nivel.jLabel_titulo.setText("Nivel " + id + ": Optimizado");
                    pnl_Evaluacion_Nivel.jTextArea_descripcion.setText(listaNiveles.get(3).getDescripcion_nivel_madurez());
                }
            }
        }

        if (primerCaracter == 'A') {
            cambiarPanel(pnlPrincipalContenedor, pnl_Evaluacion_Area_Proceso);

            Pattern patron = Pattern.compile("-([0-9]+)-");
            Matcher matcher = patron.matcher(titulo);
            int numero = 0;
            if (matcher.find()) {
                String numeroEntreGuiones = matcher.group(1);
                numero = Integer.parseInt(numeroEntreGuiones);
                System.out.println("Número entre guiones: " + numero);
            }
            ArrayList<Nivel_Madurez> listaNiveles = archivo.getNiveles();

            for (int i = 0; i < listaNiveles.size(); i++) {
                ArrayList<Area_Proceso> listaareaProcesos = listaNiveles.get(i).getArea_proceso();
                for (int j = 0; j < listaareaProcesos.size(); j++) {
                    Area_Proceso ap = listaareaProcesos.get(j);
                    if (numero == ap.id) {
                        pnl_Evaluacion_Area_Proceso.ap = ap;
                        pnl_Evaluacion_Area_Proceso.jLabel_titulo.setText(ap.getNombre_area_proceso());
                        pnl_Evaluacion_Area_Proceso.jTextArea_descripcion.setText(ap.getDescripcion_area_proceso());
                    }

                }
            }

        }

        if (primerCaracter == 'O') {
            cambiarPanel(pnlPrincipalContenedor, pnl_Evaluacion_Objetivo);
            char segundoCaracter = titulo.charAt(1);
            Pattern patron = Pattern.compile("-([0-9]+)-");
            Matcher matcher = patron.matcher(titulo);
            int numero = 0;
            if (matcher.find()) {
                String numeroEntreGuiones = matcher.group(1);
                numero = Integer.parseInt(numeroEntreGuiones);
                System.out.println("Número entre guiones: " + numero);
            }
            if (segundoCaracter == 'E') {
                ArrayList<Nivel_Madurez> listaNiveles = archivo.getNiveles();
                for (int i = 0; i < listaNiveles.size(); i++) {
                    ArrayList<Area_Proceso> listaareaProcesos = listaNiveles.get(i).getArea_proceso();
                    for (int j = 0; j < listaareaProcesos.size(); j++) {
                        Area_Proceso ap = listaareaProcesos.get(j);
                        ArrayList<Objetivo> listaObjetivos = listaareaProcesos.get(j).getListaObjetivosEspecificos();
                        for (int k = 0; k < listaObjetivos.size(); k++) {
                            Objetivo o = listaObjetivos.get(k);
                            if (numero == o.getId()) {
                                pnl_Evaluacion_Objetivo.o = o;
                                pnl_Evaluacion_Objetivo.jLabel_titulo.setText(o.getNombre_objetivo());
                                pnl_Evaluacion_Objetivo.jTextArea_descripcion.setText(o.getDescripcion_objetivo());
                            }
                        }
                    }
                }
            }
            if (segundoCaracter == 'G') {
                ArrayList<Nivel_Madurez> listaNiveles = archivo.getNiveles();
                for (int i = 0; i < listaNiveles.size(); i++) {
                    ArrayList<Area_Proceso> listaareaProcesos = listaNiveles.get(i).getArea_proceso();
                    for (int j = 0; j < listaareaProcesos.size(); j++) {
                        Area_Proceso ap = listaareaProcesos.get(j);
                        ArrayList<Objetivo> listaObjetivos = listaareaProcesos.get(j).getListaObjetivosGenericos();
                        for (int k = 0; k < listaObjetivos.size(); k++) {
                            Objetivo o = listaObjetivos.get(k);
                            if (numero == o.getId()) {
                                pnl_Evaluacion_Objetivo.o = o;
                                pnl_Evaluacion_Objetivo.jLabel_titulo.setText(o.getNombre_objetivo());
                                pnl_Evaluacion_Objetivo.jTextArea_descripcion.setText(o.getDescripcion_objetivo());
                            }
                        }
                    }
                }
            }

        }

        if (primerCaracter == 'P') {
            cambiarPanel(pnlPrincipalContenedor, pnl_Evaluacion_Practica);

            Pattern patron = Pattern.compile("-([0-9]+)-");
            Matcher matcher = patron.matcher(titulo);
            int numero = 0;
            if (matcher.find()) {
                String numeroEntreGuiones = matcher.group(1);
                numero = Integer.parseInt(numeroEntreGuiones);
                System.out.println("Número entre guiones: " + numero);
            }
            ArrayList<Nivel_Madurez> listaNiveles = archivo.getNiveles();
            for (int i = 0; i < listaNiveles.size(); i++) {
                ArrayList<Area_Proceso> listaareaProcesos = listaNiveles.get(i).getArea_proceso();
                for (int j = 0; j < listaareaProcesos.size(); j++) {
                    ArrayList<Objetivo> listaObjetivos = listaareaProcesos.get(j).getListaObjetivosEspecificos();
                    for (int k = 0; k < listaObjetivos.size(); k++) {
                        ArrayList<Practica> listaPracticas = listaObjetivos.get(k).getListaPracticas();
                        System.out.println("sss:" + listaPracticas.size());
                        for (int l = 0; l < listaPracticas.size(); l++) {
                            Practica p = listaPracticas.get(l);
                            System.out.println("sss:" + p.getId());
                            if (numero == p.getId()) {
                                pnl_Evaluacion_Practica.p = p;
                                pnl_Evaluacion_Practica.jLabel_titulo.setText(p.getNombre_practica());
                                pnl_Evaluacion_Practica.jTextArea_descripcion.setText(p.getDescripcion_practica());
                            }
                        }

                    }

                }
            }

        }

        if (primerCaracter == '|') {
            cambiarPanel(pnlPrincipalContenedor, pnl_Evaluacion_Instancia);

            Pattern patron = Pattern.compile("-([0-9]+)-");
            Matcher matcher = patron.matcher(titulo);
            int numero = 0;
            if (matcher.find()) {
                String numeroEntreGuiones = matcher.group(1);
                numero = Integer.parseInt(numeroEntreGuiones);
                System.out.println("Número entre guiones: " + numero);
            }
            ArrayList<Nivel_Madurez> listaNiveles = archivo.getNiveles();
            for (int i = 0; i < listaNiveles.size(); i++) {
                ArrayList<Area_Proceso> listaareaProcesos = listaNiveles.get(i).getArea_proceso();
                for (int j = 0; j < listaareaProcesos.size(); j++) {
                    ArrayList<Objetivo> listaObjetivos = listaareaProcesos.get(j).getListaObjetivosEspecificos();
                    for (int k = 0; k < listaObjetivos.size(); k++) {
                        ArrayList<Practica> listaPracticas = listaObjetivos.get(k).getListaPracticas();
                        System.out.println("sss:" + listaPracticas.size());
                        for (int l = 0; l < listaPracticas.size(); l++) {
                            ArrayList<Instancia> listaListancias = listaPracticas.get(l).getListaInstancia();
                            for (int m = 0; m < listaListancias.size(); m++) {
                                Instancia i1 = listaListancias.get(m);
                                System.out.println("nombre:" + i1.getNombre_instancia());
                                if (numero == i1.getId()) {
                                    pnl_Evaluacion_Instancia.instancia = i1;
                                    pnl_Evaluacion_Instancia.jLabel_titulo.setText(listaPracticas.get(l).getNombre_practica());
                                    pnl_Evaluacion_Instancia.jTextArea_descripcion.setText(listaPracticas.get(l).getDescripcion_practica());
                                }
                            }

                        }

                    }

                }
            }

        }


    }//GEN-LAST:event_EvaluarActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        for (int i = 0; i < archivo.getNiveles().size(); i++) {
            Nivel_Madurez nivel_Madurez = archivo.getNiveles().get(i);
            if (nivel_Madurez.getId_evaluacion_nivel_madurez() == 0) {
                String message = "Tiene elementos pendiente de evaluacion.";
                JOptionPane.showMessageDialog(null, message, "Toast", JOptionPane.INFORMATION_MESSAGE);
                return;
            }
        }
        DefaultMutableTreeNode raiz = (DefaultMutableTreeNode) Frm_Principal.jTree_Arbol.getModel().getRoot();
        raiz.setUserObject("✅" + raiz.getUserObject());
        ((DefaultTreeModel) Frm_Principal.jTree_Arbol.getModel()).nodeChanged(raiz);
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        DefaultMutableTreeNode raiz = (DefaultMutableTreeNode) Frm_Principal.jTree_Arbol.getModel().getRoot();
        for (int i = 0; i < raiz.getChildCount(); i++) {
            changeNodeText(Frm_Principal.jTree_Arbol, (DefaultMutableTreeNode) raiz.getChildAt(i));
        }

        for (int i = 0; i < archivo.getNiveles().size(); i++) {
            Nivel_Madurez nivel_Madurez = archivo.getNiveles().get(i);
            nivel_Madurez.setId_evaluacion_nivel_madurez(+1);
        }


    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        try {
            PDF.generarReporte();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Frm_Principal.class.getName()).log(Level.SEVERE, null, ex);
        } catch (DocumentException ex) {
            Logger.getLogger(Frm_Principal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton4ActionPerformed
    public static void cambiarPanel(JPanel container, JPanel content) {
        try {
            container.removeAll();
            container.revalidate();
            container.repaint();

            container.add(content);
            container.revalidate();
            container.repaint();
            System.out.println("camgggbiar");
        } catch (Exception e) {
            System.out.println(" error cambiar");
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Frm_Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Frm_Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Frm_Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Frm_Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                try {
                    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(Frm_Principal.class.getName()).log(Level.SEVERE, null, ex);
                } catch (InstantiationException ex) {
                    Logger.getLogger(Frm_Principal.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IllegalAccessException ex) {
                    Logger.getLogger(Frm_Principal.class.getName()).log(Level.SEVERE, null, ex);
                } catch (UnsupportedLookAndFeelException ex) {
                    Logger.getLogger(Frm_Principal.class.getName()).log(Level.SEVERE, null, ex);
                }
                try {
                    new Frm_Principal().setVisible(true);
                } catch (IOException ex) {
                    Logger.getLogger(Frm_Principal.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    private static void changeNodeText(JTree tree, DefaultMutableTreeNode node) {
        // Cambiar el texto del nodo actual
        node.setUserObject("✅" + node.getUserObject());

        // Recorrer los hijos del nodo actual
        for (int i = 0; i < node.getChildCount(); i++) {
            // Obtener el siguiente nodo hijo
            DefaultMutableTreeNode childNode = (DefaultMutableTreeNode) node.getChildAt(i);

            // Llamar recursivamente a la función para cambiar el texto del siguiente nodo
            changeNodeText(tree, childNode);
        }

        // Actualizar el árbol después de cambiar el texto
        ((DefaultTreeModel) tree.getModel()).nodeChanged(node);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JButton Btn_nueva_evaluacion;
    private javax.swing.JMenuItem Evaluar;
    private javax.swing.JButton jButton1;
    public static javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    public static javax.swing.JButton jButton_observaciones;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel_arbol_de_Despliegue;
    private javax.swing.JPopupMenu jPopupMenu_observacion_nivel;
    private javax.swing.JScrollPane jScrollPane1;
    public static javax.swing.JTree jTree_Arbol;
    private javax.swing.JPanel pnlPrincipalContenedor;
    // End of variables declaration//GEN-END:variables
}
