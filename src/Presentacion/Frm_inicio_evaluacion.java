/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Presentacion;

import Negocio.Area_Proceso;
import Negocio.BC_Evaluacion_General;
import Negocio.Evaluacion_Area_Proceso;
import Negocio.Evaluacion_Nivel_Madurez;
import Negocio.Evaluacion_Objetivo;
import Negocio.Evaluacion_Practica;
import Negocio.Instancia;
import Negocio.Nivel_Madurez;
import Negocio.Objetivo;
import Negocio.Observacion;
import Negocio.Practica;
import java.util.ArrayList;
import javax.swing.JTree;
import Presentacion.Frm_Principal;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeModel;

/**
 *
 * @author Usuario
 */
public class Frm_inicio_evaluacion extends javax.swing.JFrame {

    private BC_Evaluacion_General bC_Evaluacion_General = new BC_Evaluacion_General();

    /**
     * Creates new form Inicio_evaluacion
     */
    public Frm_inicio_evaluacion(BC_Evaluacion_General archivo) {
        bC_Evaluacion_General = archivo;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jtf_nombre_organizacion = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jCbx_alcance_evaluacion = new javax.swing.JComboBox<>();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTa_lista_instancias = new javax.swing.JTextArea();
        jTf_nombre_instancia = new javax.swing.JTextField();
        jBtn_agregar_instancia = new javax.swing.JButton();
        jBtn_eliminar_instancia = new javax.swing.JButton();
        jBtn_aceptar_guardar_evaluacion_general = new javax.swing.JButton();
        jBtn_cancelar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setText("Organizacion a evaluar:");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(19, 21, 149, -1));
        jPanel1.add(jtf_nombre_organizacion, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 20, 240, -1));

        jLabel2.setText("Alcance de la evaluacion:");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 90, 150, -1));

        jCbx_alcance_evaluacion.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Areas de Proceso", "Objetivos", "Practicas" }));
        jPanel1.add(jCbx_alcance_evaluacion, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 90, 210, -1));

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Instancias de evaluacion"));

        jTa_lista_instancias.setColumns(20);
        jTa_lista_instancias.setRows(5);
        jScrollPane1.setViewportView(jTa_lista_instancias);

        jBtn_agregar_instancia.setText("Agregar");
        jBtn_agregar_instancia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtn_agregar_instanciaActionPerformed(evt);
            }
        });

        jBtn_eliminar_instancia.setText("Eliminar");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(jTf_nombre_instancia)
                        .addContainerGap())
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 85, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jBtn_agregar_instancia, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jBtn_eliminar_instancia, javax.swing.GroupLayout.DEFAULT_SIZE, 116, Short.MAX_VALUE))
                        .addGap(14, 14, 14))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jTf_nombre_instancia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jBtn_agregar_instancia)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBtn_eliminar_instancia)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 150, 390, 160));

        jBtn_aceptar_guardar_evaluacion_general.setText("Aceptar");
        jBtn_aceptar_guardar_evaluacion_general.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtn_aceptar_guardar_evaluacion_generalActionPerformed(evt);
            }
        });
        jPanel1.add(jBtn_aceptar_guardar_evaluacion_general, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 330, 100, -1));

        jBtn_cancelar.setText("Cancelar");
        jPanel1.add(jBtn_cancelar, new org.netbeans.lib.awtextra.AbsoluteConstraints(241, 330, 90, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 380, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jBtn_agregar_instanciaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtn_agregar_instanciaActionPerformed
        String nombre = jTf_nombre_instancia.getText();
        jTa_lista_instancias.append(nombre + "\n");
        jTf_nombre_instancia.setText("");
    }//GEN-LAST:event_jBtn_agregar_instanciaActionPerformed

    private void jBtn_aceptar_guardar_evaluacion_generalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtn_aceptar_guardar_evaluacion_generalActionPerformed
        String nombre_organizacion = jtf_nombre_organizacion.getText();
        ArrayList<Observacion> listaObservaciones = new ArrayList<Observacion>();
        ArrayList<Nivel_Madurez> listaNiveles = new ArrayList();
        String descripcionNivel2 = "Una organizacion de encuentra en este nivel cuando ha \nsatisfecho todos los objetivos genericos y especificos \ncorrespondientes a"
                + " las areas de proceso del mismo. \nEn otras palabras,"
                + " los proyectos de la organizacion se aseguran de \ngestionar los requisitos y los procesos se planifican, \nejecutan , miden y controlan.";
        String descripcionNivel3 = "Una organizacion de encuentra en este nivel cuando \nha satisfecho todos los objetivos genericos y especificos correspondiente \na "
                + "las areas de proceso asignadas a los niveles 2 y 3,"
                + "en el nivel 3 los procesos son entendidos, bien caracterizados , \ny se encuentran descriptos en estandares, procedimientos, herramientas y metodos.";
        if (jCbx_alcance_evaluacion.getSelectedIndex() == 0) { // AREAS DE PROCESO
            ArrayList<Area_Proceso> listaAreasProcesosN2 = new ArrayList();
            String nombreProceso1 = "AP1-1-: Gestion de requisitos";
            Area_Proceso area_Proceso1 = new Area_Proceso(1, 0, nombreProceso1, "", null, null);
            listaAreasProcesosN2.add(area_Proceso1);

            String nombreProceso2 = "AP2-2-: Planificacion de proyectos";
            Area_Proceso area_Proceso2 = new Area_Proceso(2, 0, nombreProceso2, "", null, null);
            listaAreasProcesosN2.add(area_Proceso2);

            String nombreProceso3 = "AP3-3-: Monitoreo y control de proyectos";
            Area_Proceso area_Proceso3 = new Area_Proceso(3, 0, nombreProceso3, "", null, null);
            listaAreasProcesosN2.add(area_Proceso3);

            String nombreProceso4 = "AP4-4-: Gestion de acuerdos con proveedores";
            Area_Proceso area_Proceso4 = new Area_Proceso(4, 0, nombreProceso4, "", null, null);
            listaAreasProcesosN2.add(area_Proceso4);

            String nombreProceso5 = "AP5-5-: Mediciones y analisis";
            Area_Proceso area_Proceso5 = new Area_Proceso(5, 0, nombreProceso5, "", null, null);
            listaAreasProcesosN2.add(area_Proceso5);

            Nivel_Madurez nivel_Madurez2 = new Nivel_Madurez(2, 0, "N2:Gestionado", descripcionNivel2, listaAreasProcesosN2);

            /////////////////////////////////////// NIVEL 3   ////////////////////////////////////////
            ArrayList<Area_Proceso> listaAreasProcesosN3 = new ArrayList();
            String nombreProceso6 = "AP1-6-:Desarrollo de requisitos";
            Area_Proceso area_Proceso6 = new Area_Proceso(6, 0, nombreProceso6, "", null, null);
            listaAreasProcesosN3.add(area_Proceso6);

            String nombreProceso7 = "AP2-7-:Solucion tecnica";
            Area_Proceso area_Proceso7 = new Area_Proceso(7, 0, nombreProceso7, "", null, null);
            listaAreasProcesosN3.add(area_Proceso7);

            String nombreProceso8 = "AP3-8-:Integracion del producto";
            Area_Proceso area_Proceso8 = new Area_Proceso(8, 0, nombreProceso8, "", null, null);
            listaAreasProcesosN3.add(area_Proceso8);

            String nombreProceso9 = "AP4-9-:Verificacion";
            Area_Proceso area_Proceso9 = new Area_Proceso(9, 0, nombreProceso9, "", null, null);
            listaAreasProcesosN3.add(area_Proceso9);

            String nombreProceso10 = "AP5-10-:Validacion";
            Area_Proceso area_Proceso10 = new Area_Proceso(10, 0, nombreProceso10, "", null, null);
            listaAreasProcesosN3.add(area_Proceso10);

            Nivel_Madurez nivel_Madurez3 = new Nivel_Madurez(3, 0, "N3: Definido", descripcionNivel3, listaAreasProcesosN3);

            //////////////////////////////// NIVEL 4  /////////////////////////////////////////////////////
            ArrayList<Area_Proceso> listaAreasProcesosN4 = new ArrayList();
            String nombreProceso11 = "AP1-11-:Gestion cuantitativa del proceso";
            Area_Proceso area_Proceso11 = new Area_Proceso(11, 0, nombreProceso11, "", null, null);
            listaAreasProcesosN4.add(area_Proceso11);

            String nombreProceso12 = "AP2-12-:Desempeño del proceso organizacional";
            Area_Proceso area_Proceso12 = new Area_Proceso(12, 0, nombreProceso12, "", null, null);
            listaAreasProcesosN4.add(area_Proceso12);

            Nivel_Madurez nivel_Madurez4 = new Nivel_Madurez(4, 0, "N4: Gestionado cuatitativamente", descripcionNivel3, listaAreasProcesosN4);

            ////////////////////////////////////// NIVEL 5  //////////////////////////////////////////////
            ArrayList<Area_Proceso> listaAreasProcesosN5 = new ArrayList();
            String nombreProceso13 = "AP1-13-:Optimizacion del proceso organizacional";
            Area_Proceso area_Proceso13 = new Area_Proceso(13, 0, nombreProceso13, "", null, null);
            listaAreasProcesosN5.add(area_Proceso13);

            String nombreProceso14 = "AP2-14-:Mejora continua del proceso";
            Area_Proceso area_Proceso14 = new Area_Proceso(14, 0, nombreProceso14, "", null, null);
            listaAreasProcesosN5.add(area_Proceso14);

            Nivel_Madurez nivel_Madurez5 = new Nivel_Madurez(5, 0, "N5: Optimizado", descripcionNivel3, listaAreasProcesosN5);

            listaNiveles.add(nivel_Madurez2);
            listaNiveles.add(nivel_Madurez3);
            listaNiveles.add(nivel_Madurez4);
            listaNiveles.add(nivel_Madurez5);

            bC_Evaluacion_General.setNombre_organizacion(nombre_organizacion);
            bC_Evaluacion_General.setAlcance(jCbx_alcance_evaluacion.getSelectedIndex());
            bC_Evaluacion_General.setNiveles(listaNiveles);
        }

        //---------------------------------------------------------------------------------------------------------//
        if (jCbx_alcance_evaluacion.getSelectedIndex() == 1) { // OBJETIVOS

            ArrayList<Objetivo> listaObjetivoE1 = new ArrayList();
            String nombreObjetivoE1 = "OE1: Gestionar requisitos";
            Objetivo objetivoE1 = new Objetivo(1, 0, nombreObjetivoE1, "", null);
            listaObjetivoE1.add(objetivoE1);

            ArrayList<Objetivo> listaObjetivoG1 = new ArrayList();
            String nombreObjetivoG1 = "OG1:Definicion del proceso de gestion de proyectos";
            Objetivo objetivoG1 = new Objetivo(2, 0, nombreObjetivoG1, "", null);
            listaObjetivoG1.add(objetivoG1);

            ArrayList<Area_Proceso> listaAreasProcesosN2 = new ArrayList();
            String nombreProceso1 = "AP1-1-: Gestion de requisitos";
            Area_Proceso area_Proceso1 = new Area_Proceso(1, 0, nombreProceso1, "", listaObjetivoE1, listaObjetivoG1);
            listaAreasProcesosN2.add(area_Proceso1);

            String nombreProceso2 = "AP2-2-: Planificacion de proyectos";
            Area_Proceso area_Proceso2 = new Area_Proceso(2, 0, nombreProceso2, "", null, null);
            listaAreasProcesosN2.add(area_Proceso2);

            String nombreProceso3 = "AP3-3-: Monitoreo y control de proyectos";
            Area_Proceso area_Proceso3 = new Area_Proceso(3, 0, nombreProceso3, "", null, null);
            listaAreasProcesosN2.add(area_Proceso3);

            String nombreProceso4 = "AP4-4: Gestion de acuerdos con proveedores";
            Area_Proceso area_Proceso4 = new Area_Proceso(4, 0, nombreProceso4, "", null, null);
            listaAreasProcesosN2.add(area_Proceso4);

            String nombreProceso5 = "AP5-5-: Mediciones y analisis";
            Area_Proceso area_Proceso5 = new Area_Proceso(5, 0, nombreProceso5, "", null, null);
            listaAreasProcesosN2.add(area_Proceso5);

            Nivel_Madurez nivel_Madurez2 = new Nivel_Madurez(2, 0, "N2:Gestionado", descripcionNivel2, listaAreasProcesosN2);

            /////////////////////////////////////// NIVEL 3   ////////////////////////////////////////
            ArrayList<Area_Proceso> listaAreasProcesosN3 = new ArrayList();
            String nombreProceso6 = "AP1-6-:Desarrollo de requisitos";
            Area_Proceso area_Proceso6 = new Area_Proceso(6, 0, nombreProceso6, "", null, null);
            listaAreasProcesosN3.add(area_Proceso6);

            String nombreProceso7 = "AP2-7-:Solucion tecnica";
            Area_Proceso area_Proceso7 = new Area_Proceso(7, 0, nombreProceso7, "", null, null);
            listaAreasProcesosN3.add(area_Proceso7);

            String nombreProceso8 = "AP3-8-:Integracion del producto";
            Area_Proceso area_Proceso8 = new Area_Proceso(8, 0, nombreProceso8, "", null, null);
            listaAreasProcesosN3.add(area_Proceso8);

            String nombreProceso9 = "AP4-9-:Verificacion";
            Area_Proceso area_Proceso9 = new Area_Proceso(9, 0, nombreProceso9, "", null, null);
            listaAreasProcesosN3.add(area_Proceso9);

            String nombreProceso10 = "AP5-10-:Validacion";
            Area_Proceso area_Proceso10 = new Area_Proceso(10, 0, nombreProceso10, "", null, null);
            listaAreasProcesosN3.add(area_Proceso10);

            Nivel_Madurez nivel_Madurez3 = new Nivel_Madurez(3, 0, "N3: Definido", descripcionNivel3, listaAreasProcesosN3);

            //////////////////////////////// NIVEL 4  /////////////////////////////////////////////////////
            ArrayList<Area_Proceso> listaAreasProcesosN4 = new ArrayList();
            String nombreProceso11 = "AP1-11-:Gestion cuantitativa del proceso";
            Area_Proceso area_Proceso11 = new Area_Proceso(11, 0, nombreProceso11, "", null, null);
            listaAreasProcesosN4.add(area_Proceso11);

            String nombreProceso12 = "AP2-12-:Desempeño del proceso organizacional";
            Area_Proceso area_Proceso12 = new Area_Proceso(12, 0, nombreProceso12, "", null, null);
            listaAreasProcesosN4.add(area_Proceso12);

            Nivel_Madurez nivel_Madurez4 = new Nivel_Madurez(4, 0, "N4: Gestionado cuatitativamente", descripcionNivel3, listaAreasProcesosN4);

            ////////////////////////////////////// NIVEL 5  //////////////////////////////////////////////
            ArrayList<Area_Proceso> listaAreasProcesosN5 = new ArrayList();
            String nombreProceso13 = "AP1-13-:Optimizacion del proceso organizacional";
            Area_Proceso area_Proceso13 = new Area_Proceso(13, 0, nombreProceso13, "", null, null);
            listaAreasProcesosN5.add(area_Proceso13);

            String nombreProceso14 = "AP2-14-:Mejora continua del proceso";
            Area_Proceso area_Proceso14 = new Area_Proceso(14, 0, nombreProceso14, "", null, null);
            listaAreasProcesosN5.add(area_Proceso14);

            Nivel_Madurez nivel_Madurez5 = new Nivel_Madurez(5, 0, "N5: Optimizado", descripcionNivel3, listaAreasProcesosN5);

            listaNiveles.add(nivel_Madurez2);
            listaNiveles.add(nivel_Madurez3);
            listaNiveles.add(nivel_Madurez4);
            listaNiveles.add(nivel_Madurez5);

            bC_Evaluacion_General.setNombre_organizacion(nombre_organizacion);
            bC_Evaluacion_General.setAlcance(jCbx_alcance_evaluacion.getSelectedIndex());
            bC_Evaluacion_General.setNiveles(listaNiveles);
        }

        //------------------------------ PRACTICAS  -----------------------------------------------
        if (jCbx_alcance_evaluacion.getSelectedIndex() == 2) { // PRACTICAS
            String textoCompleto = jTa_lista_instancias.getText();
            String[] lineas = textoCompleto.split("\n");
            int contador = 0;
            ArrayList<Instancia> listaInstancias = new ArrayList();
            for (String nombre : lineas) {
                contador = contador + 1;
                Instancia instancia = new Instancia(contador, 0, "|-" + contador + "-" + nombre, null);
                listaInstancias.add(instancia);
                System.out.println(nombre);
            }
            ArrayList<Area_Proceso> listaAreasProcesosN01 = new ArrayList();
            ArrayList<Objetivo> listaObjetivosE = new ArrayList();
            ArrayList<Objetivo> listaObjetivosG = new ArrayList();

            String descripAp1 = "En el nivel de madurez 1, los procesos suelen ser ad hoc y caótico. \nLa organización normalmente no proporciona "
                    + "un entorno estable. El éxito de estas \norganizaciones dependen de la competencia y de la disposición de las personas de la organización y no en el uso de \nprocesos probados.\n"
                    + "\n"
                    + "Las organizaciones con un nivel de \nmadurez 1 a menudo se producen los productos y servicios "
                    + "que funcionan; sin embargo, frecuentemente \nexceden el presupuesto y el calendario de sus proyectos.\n"
                    + "\n"
                    + "Las organizaciones con un nivel de madurez 1 \nse caracterizan por una tendencia a cometer, abandonar"
                    + " los procesos en el momento de la crisis, y \nno ser capaz de repetir sus éxitos pasados.";
            String nombreProceso01 = "AP-0-: Comprension de los Procesos";
            String descripcionNivel11 = "En el Nivel 1 de CMMI, las organizaciones suelen tener \nprocesos ad hoc y poco predecibles. "
                    + "Esto implica que los procesos no están bien definidos, \ndocumentados ni estandarizados en toda la organización.";
            Area_Proceso area_Proceso01 = new Area_Proceso(0, 0, nombreProceso01, descripAp1, listaObjetivosE, listaObjetivosG);
            listaAreasProcesosN01.add(area_Proceso01);

            Nivel_Madurez nivel_Madurez1 = new Nivel_Madurez(1, 0, "N1:Inicio", descripcionNivel11, listaAreasProcesosN01);
            System.out.println("CANTIDAD=" + nivel_Madurez1.getArea_proceso().get(0).getId_evaluacion_area_proceso());

//////////////////////////////// NIVEL 2 /////////////////////////////////////////////////
            ArrayList<Observacion> listaObservacions = new ArrayList();
            Observacion ot = new Observacion(1, 1, 0, descripcionNivel3);
            listaObservacions.add(ot);
            String descripcion_practica = "Desarrollar un entendimiento del significado de los \nrequisitos con los proveedores de los mismos."
                    + "Mientras el proyecto madura y se derivan los \nrequerimientos , todas las actividades o disciplinas recibiran requisitos. \nPara evitar un crecimiento explosivo de los mismos."
                    + ", se establecen criterios para señalar los canales apropiados, o las fuentes oficiales de las cuales \nrecibir requisitos. Las actividades de recepcion conducen alalisis de los \nrequisitos"
                    + "con el proveedor de los mismos para asegurar que se alcanza una \ncomprension compatible y compartida en el significado.";
            ArrayList<Practica> listaPracticas = new ArrayList();
            String nombrePractica1 = "P1-1-: Obtener comprension de los requisitos";
            Practica practica01 = new Practica(1, 0, nombrePractica1, descripcion_practica, listaInstancias, listaObservacions);
            listaPracticas.add(practica01);

            ArrayList<Objetivo> listaObjetivoE1 = new ArrayList();
            String nombreObjetivoE1 = "OE1-1-: Gestionar requisitos";
            String deso="se centra en establecer y mantener un proceso de gestión \nde requisitos efectivo y consistente dentro "
                    + "de la organización. Este objetivo abarca \nvarias áreas clave para asegurar "
                    + "que los requisitos del producto o \nsistema sean comprendidos, "
                    + "documentados, verificados y gestionados \nadecuadamente a lo largo del ciclo de vida del proyecto.";
            Objetivo objetivoE1 = new Objetivo(1, 0, nombreObjetivoE1, deso, listaPracticas);
            listaObjetivoE1.add(objetivoE1);

            ArrayList<Objetivo> listaObjetivoG1 = new ArrayList();
            String nombreObjetivoG1 = "OG1-2-:Definicion del proceso de gestion de proyectos";
            ArrayList<Practica> listaObjetivoE34 = new ArrayList();
            Objetivo objetivoG1 = new Objetivo(2, 0, nombreObjetivoG1, "", listaObjetivoE34);
            listaObjetivoG1.add(objetivoG1);

            ArrayList<Area_Proceso> listaAreasProcesosN2 = new ArrayList();
            String nombreProceso1 = "AP1-1-: Gestion de requisitos";
            String desc = "Se enfatiza la importancia de capturar y documentar adecuadamente \nlos requisitos del "
                    + "cliente y del sistema de manera clara y completa. \nEsto incluye identificar stakeholders "
                    + "relevantes y sus necesidades, así \ncomo establecer mecanismos para gestionar cambios en "
                    + "los requisitos a lo largo \ndel ciclo de vida del proyecto.";
            Area_Proceso area_Proceso1 = new Area_Proceso(1, 0, nombreProceso1, desc, listaObjetivoE1, listaObjetivoG1);
            listaAreasProcesosN2.add(area_Proceso1);
String ap3 = "Se establecen métodos para realizar el seguimiento \ny la verificación de los requisitos "
                    + "a lo largo del ciclo de vida del proyecto, \nasegurando que sean consistentes, completos y verificables.";
            String nombreProceso2 = "AP2-2-: Planificacion de proyectos";
            ArrayList<Objetivo> listaObjetivoE3 = new ArrayList();
            Area_Proceso area_Proceso2 = new Area_Proceso(2, 0, nombreProceso2, ap3, listaObjetivoE3, listaObjetivoE3);
            System.out.println("ddd:::" + area_Proceso2.getNombre_area_proceso());
            listaAreasProcesosN2.add(area_Proceso2);

            String nombreProceso3 = "AP3-3-: Monitoreo y control de proyectos";
            
            Area_Proceso area_Proceso3 = new Area_Proceso(3, 0, nombreProceso3, ap3, listaObjetivoE3, listaObjetivoE3);
            listaAreasProcesosN2.add(area_Proceso3);

            String nombreProceso4 = "AP4-4-: Gestion de acuerdos con proveedores";
            Area_Proceso area_Proceso4 = new Area_Proceso(4, 0, nombreProceso4, "", listaObjetivoE3, listaObjetivoE3);
            listaAreasProcesosN2.add(area_Proceso4);

            String nombreProceso5 = "AP5-5-: Mediciones y analisis";
            Area_Proceso area_Proceso5 = new Area_Proceso(5, 0, nombreProceso5, "", listaObjetivoE3, listaObjetivoE3);
            listaAreasProcesosN2.add(area_Proceso5);

            Nivel_Madurez nivel_Madurez2 = new Nivel_Madurez(2, 0, "N2:Gestionado", descripcionNivel2, listaAreasProcesosN2);

            /////////////////////////////////////// NIVEL 3   ////////////////////////////////////////
            ArrayList<Area_Proceso> listaAreasProcesosN3 = new ArrayList();
            String nombreProceso6 = "AP1-6-:Desarrollo de requisitos";
            Area_Proceso area_Proceso6 = new Area_Proceso(6, 0, nombreProceso6, "", listaObjetivoE1, listaObjetivoG1);
            listaAreasProcesosN3.add(area_Proceso6);

            String nombreProceso7 = "AP2-7-:Solucion tecnica";
            Area_Proceso area_Proceso7 = new Area_Proceso(7, 0, nombreProceso7, "", listaObjetivoE3, listaObjetivoE3);
            listaAreasProcesosN3.add(area_Proceso7);

            String nombreProceso8 = "AP3-8-:Integracion del producto";
            Area_Proceso area_Proceso8 = new Area_Proceso(8, 0, nombreProceso8, "", listaObjetivoE3, listaObjetivoE3);
            listaAreasProcesosN3.add(area_Proceso8);

            String nombreProceso9 = "AP4-9-:Verificacion";
            Area_Proceso area_Proceso9 = new Area_Proceso(9, 0, nombreProceso9, "", listaObjetivoE3, listaObjetivoE3);
            listaAreasProcesosN3.add(area_Proceso9);

            String nombreProceso10 = "AP5-10-:Validacion";
            Area_Proceso area_Proceso10 = new Area_Proceso(10, 0, nombreProceso10, "", listaObjetivoE3, listaObjetivoE3);
            listaAreasProcesosN3.add(area_Proceso10);

            Nivel_Madurez nivel_Madurez3 = new Nivel_Madurez(3, 0, "N3: Definido", descripcionNivel3, listaAreasProcesosN3);

            //////////////////////////////// NIVEL 4  /////////////////////////////////////////////////////
            ArrayList<Area_Proceso> listaAreasProcesosN4 = new ArrayList();
            String nombreProceso11 = "AP1-11-:Gestion cuantitativa del proceso";
            Area_Proceso area_Proceso11 = new Area_Proceso(11, 0, nombreProceso11, "", listaObjetivoE1, listaObjetivoG1);
            listaAreasProcesosN4.add(area_Proceso11);

            String nombreProceso12 = "AP2-12-:Desempeño del proceso organizacional";
            Area_Proceso area_Proceso12 = new Area_Proceso(12, 0, nombreProceso12, "", listaObjetivoE3, listaObjetivoE3);
            listaAreasProcesosN4.add(area_Proceso12);

            Nivel_Madurez nivel_Madurez4 = new Nivel_Madurez(4, 0, "N4: Gestionado cuatitativamente", descripcionNivel3, listaAreasProcesosN4);

            ////////////////////////////////////// NIVEL 5  //////////////////////////////////////////////
            ArrayList<Area_Proceso> listaAreasProcesosN5 = new ArrayList();
            String nombreProceso13 = "AP1-13-:Optimizacion del proceso organizacional";
            Area_Proceso area_Proceso13 = new Area_Proceso(13, 0, nombreProceso13, "", listaObjetivoE1, listaObjetivoG1);
            listaAreasProcesosN5.add(area_Proceso13);

            String nombreProceso14 = "AP2-14-:Mejora continua del proceso";
            Area_Proceso area_Proceso14 = new Area_Proceso(14, 0, nombreProceso14, "", listaObjetivoE3, listaObjetivoE3);
            listaAreasProcesosN5.add(area_Proceso14);

            Nivel_Madurez nivel_Madurez5 = new Nivel_Madurez(5, 0, "N5: Optimizado", descripcionNivel3, listaAreasProcesosN5);

            listaNiveles.add(nivel_Madurez1);
            listaNiveles.add(nivel_Madurez2);
            listaNiveles.add(nivel_Madurez3);
            listaNiveles.add(nivel_Madurez4);
            listaNiveles.add(nivel_Madurez5);

            ///////////////////////////////  OBSERVACIONES ////////////////////////////////////////////
            Observacion o = new Observacion(1, 1, 0, "Descripcion de la observacion1");
            Observacion o1 = new Observacion(2, 0, 0, "Descripcion de la observacion2");
            Observacion o2 = new Observacion(3, 1, 1, "Descripcion de la observacion3");
            Observacion o3 = new Observacion(4, 0, 1, "Descripcion de la observacion4");
            listaObservaciones.add(o);
            listaObservaciones.add(o1);
            listaObservaciones.add(o2);
            listaObservaciones.add(o3);

            ArrayList<Evaluacion_Practica> listaEvaluacionesPractivas = new ArrayList();
            ArrayList<Evaluacion_Objetivo> listaEvaluacion_Objetivos = new ArrayList();
            ArrayList<Evaluacion_Area_Proceso> listaEvaluacion_Area_Procesos = new ArrayList();
            ArrayList<Evaluacion_Nivel_Madurez> listaEvaluacion_Nivel_Madurezs = new ArrayList();
            bC_Evaluacion_General.setNombre_organizacion(nombre_organizacion);
            bC_Evaluacion_General.setAlcance(jCbx_alcance_evaluacion.getSelectedIndex());
            bC_Evaluacion_General.setNiveles(listaNiveles);
            bC_Evaluacion_General.setListaObservaciones(listaObservaciones);
            bC_Evaluacion_General.setListaEvaluacionesPracticas(listaEvaluacionesPractivas);
            bC_Evaluacion_General.setListaEvaluacionesObjetivos(listaEvaluacion_Objetivos);
            bC_Evaluacion_General.setListaEvaluacionAreaProceso(listaEvaluacion_Area_Procesos);
            bC_Evaluacion_General.setListaEvaluacionNivelMadurez(listaEvaluacion_Nivel_Madurezs);
            System.out.println("NIVEL:" + bC_Evaluacion_General.getNombre_organizacion());
            System.out.println("IMPRIMIR:" + bC_Evaluacion_General.getNiveles().get(0).getNombre_nivel_madurez());
            // System.out.println("IMPRIeeeeMIR:" + bC_Evaluacion_General.getNiveles().get(0).getArea_proceso().get(0).getListaObjetivosEspecificos().get(0).getListaPracticas().get(0).getNombre_practica());

            DefaultMutableTreeNode raiz = (DefaultMutableTreeNode) Frm_Principal.jTree_Arbol.getModel().getRoot();
            raiz.setUserObject(bC_Evaluacion_General.getNombre_organizacion());

            //  DefaultMutableTreeNode raiz = new DefaultMutableTreeNode(bC_Evaluacion_General.getNombre_organizacion());
// Convertimos cada nivel en un nodo hijo
            for (Nivel_Madurez nivel : bC_Evaluacion_General.getNiveles()) {
                DefaultMutableTreeNode nodoNivel = new DefaultMutableTreeNode(nivel.getNombre_nivel_madurez());

                // Convertimos cada área de proceso en un nodo hijo del nivel
                try {
                    for (Area_Proceso proceso : nivel.getArea_proceso()) {
                        DefaultMutableTreeNode nodoProceso = new DefaultMutableTreeNode(proceso.getNombre_area_proceso());

                        // Agregamos los objetivos específicos
                        try {
                            for (Objetivo objetivoE : proceso.getListaObjetivosEspecificos()) {
                                DefaultMutableTreeNode nodoObjetivoE = new DefaultMutableTreeNode(objetivoE.getNombre_objetivo());
                                // Agregamos las prácticas y las instancias
                                for (Practica practica : objetivoE.getListaPracticas()) {
                                    System.out.println("practica:" + practica.getNombre_practica());
                                    DefaultMutableTreeNode nodoPractica = new DefaultMutableTreeNode(practica.getNombre_practica());

                                    for (Instancia instancia : practica.getListaInstancia()) {
                                        DefaultMutableTreeNode nodoInstancia = new DefaultMutableTreeNode(instancia.getNombre_instancia());
                                        nodoPractica.add(nodoInstancia);

                                    }

                                    nodoObjetivoE.add(nodoPractica);
                                }

                                nodoProceso.add(nodoObjetivoE);
                            }
                        } catch (Exception e) {
                        }
                        // Agregamos los objetivos genéricos
                        for (Objetivo objetivoG : proceso.getListaObjetivosGenericos()) {
                            DefaultMutableTreeNode nodoObjetivoG = new DefaultMutableTreeNode(objetivoG.getNombre_objetivo());
                            // Agregamos las prácticas y las instancias
                            try {
                                for (Practica practica : objetivoG.getListaPracticas()) {
                                    DefaultMutableTreeNode nodoPractica = new DefaultMutableTreeNode(practica.getNombre_practica());
                                    System.out.println("practica:" + practica.getNombre_practica());
                                    for (Instancia instancia : practica.getListaInstancia()) {
                                        DefaultMutableTreeNode nodoInstancia = new DefaultMutableTreeNode(instancia.getNombre_instancia());
                                        nodoPractica.add(nodoInstancia);
                                    }

                                    nodoObjetivoG.add(nodoPractica);
                                }
                            } catch (Exception e) {
                            }
                            nodoProceso.add(nodoObjetivoG);
                        }

                        nodoNivel.add(nodoProceso);
                    }

                } catch (Exception e) {
                }
                raiz.add(nodoNivel);
            }
            String archivo = "objeto_serializado.CMMI";

            try {
                // Crear un flujo de salida de archivo
                FileOutputStream fileOut = new FileOutputStream(archivo);
                // Crear un flujo de salida de objetos
                ObjectOutputStream out = new ObjectOutputStream(fileOut);
                // Escribir el objeto serializado en el archivo
                out.writeObject(bC_Evaluacion_General);
                // Cerrar los flujos
                out.close();
                fileOut.close();
                System.out.println("El objeto ha sido serializado y guardado en " + archivo);
            } catch (IOException i) {
                i.printStackTrace();
            }
// Asignamos el árbol al componente correcto
            DefaultTreeModel modelo = new DefaultTreeModel(raiz); // Crea un nuevo DefaultTreeModel con la raíz personalizada
            Frm_Principal.jTree_Arbol.setModel(modelo); // Establece el modelo en el JTree
            this.dispose();
        }
    }//GEN-LAST:event_jBtn_aceptar_guardar_evaluacion_generalActionPerformed

    /**
     * @param args the command line arguments
     */
    public void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Frm_inicio_evaluacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Frm_inicio_evaluacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Frm_inicio_evaluacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Frm_inicio_evaluacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Frm_inicio_evaluacion(bC_Evaluacion_General).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JButton jBtn_aceptar_guardar_evaluacion_general;
    public static javax.swing.JButton jBtn_agregar_instancia;
    public static javax.swing.JButton jBtn_cancelar;
    public static javax.swing.JButton jBtn_eliminar_instancia;
    public static javax.swing.JComboBox<String> jCbx_alcance_evaluacion;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    public static javax.swing.JTextArea jTa_lista_instancias;
    public static javax.swing.JTextField jTf_nombre_instancia;
    public static javax.swing.JTextField jtf_nombre_organizacion;
    // End of variables declaration//GEN-END:variables
}
