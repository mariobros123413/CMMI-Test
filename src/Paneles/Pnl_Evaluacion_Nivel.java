/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Paneles;

import Negocio.Area_Proceso;
import Negocio.Evaluacion_Nivel_Madurez;
import Negocio.Instancia;
import Negocio.Nivel_Madurez;
import Negocio.Objetivo;
import Negocio.Practica;
import Negocio.VariablesGoblales;
import Presentacion.Frm_Principal;
import javax.swing.JOptionPane;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreePath;

/**
 *
 * @author Usuario
 */
public class Pnl_Evaluacion_Nivel extends javax.swing.JPanel {

    public Nivel_Madurez nivel_Madurez;
    public Evaluacion_Nivel_Madurez evaluacion_Nivel_Madurez;

    /**
     * Creates new form Pnl_home
     */
    public Pnl_Evaluacion_Nivel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel_titulo = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea_descripcion = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jComboBox_valoracion_concluida_nivel_marudez = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setText("Evaluacion  de Nivel de Madurez");
        jPanel2.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(157, 8, 194, -1));

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 520, 30));

        jLabel_titulo.setForeground(new java.awt.Color(0, 0, 0));
        jLabel_titulo.setText("Nivel # : titulo");
        jPanel1.add(jLabel_titulo, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 50, 320, -1));

        jTextArea_descripcion.setColumns(20);
        jTextArea_descripcion.setRows(5);
        jScrollPane1.setViewportView(jTextArea_descripcion);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 80, 490, 240));

        jLabel1.setForeground(new java.awt.Color(0, 0, 0));
        jLabel1.setText("Valoracion concluida:");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 350, -1, -1));

        jComboBox_valoracion_concluida_nivel_marudez.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ALCANZADO", "NO ALCANZADO" }));
        jPanel1.add(jComboBox_valoracion_concluida_nivel_marudez, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 350, 240, -1));

        jButton1.setText("Aceptar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 350, 110, -1));

        add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 520, 399));
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        for (int i = 0; i < nivel_Madurez.getArea_proceso().size(); i++) {
            Area_Proceso ap = nivel_Madurez.getArea_proceso().get(i);
            if (ap.getId_evaluacion_area_proceso() != 0) {
                for (int j = 0; j < ap.getListaObjetivosEspecificos().size(); j++) {
                    Objetivo o = ap.getListaObjetivosEspecificos().get(j);
                    if (o.getId_evaluacion_objetivo() != 0) {
                        for (int k = 0; k < o.getListaPracticas().size(); k++) {
                            Practica practica = o.getListaPracticas().get(k);
                            if (practica.getId_evaluacion_practiva() != 0) {
                                for (int l = 0; l < practica.getListaInstancia().size(); l++) {
                                    Instancia instancia = practica.getListaInstancia().get(l);
                                    if (instancia.getId_evaluacion_practica() == 0) {
                                        String message = "Tiene elementos pendiente de evaluacion.";
                                        JOptionPane.showMessageDialog(null, message, "Toast", JOptionPane.INFORMATION_MESSAGE);
                                        return;
                                    }
                                }

                            } else {
                                String message = "Tiene elementos pendiente de evaluacion.";
                                JOptionPane.showMessageDialog(null, message, "Toast", JOptionPane.INFORMATION_MESSAGE);
                                return;
                            }
                        }
                    } else {
                        String message = "Tiene elementos pendiente de evaluacion.";
                        JOptionPane.showMessageDialog(null, message, "Toast", JOptionPane.INFORMATION_MESSAGE);
                        return;
                    }
                }

                for (int j = 0; j < ap.getListaObjetivosGenericos().size(); j++) {
                    Objetivo o = ap.getListaObjetivosGenericos().get(j);
                    if (o.getId_evaluacion_objetivo() != 0) {
                        for (int k = 0; k < o.getListaPracticas().size(); k++) {
                            Practica practica = o.getListaPracticas().get(k);
                            if (practica.getId_evaluacion_practiva() != 0) {
                                for (int l = 0; l < practica.getListaInstancia().size(); l++) {
                                    Instancia instancia = practica.getListaInstancia().get(l);
                                    if (instancia.getId_evaluacion_practica() == 0) {
                                        String message = "Tiene elementos pendiente de evaluacion.";
                                        JOptionPane.showMessageDialog(null, message, "Toast", JOptionPane.INFORMATION_MESSAGE);
                                        return;
                                    }
                                }

                            } else {
                                String message = "Tiene elementos pendiente de evaluacion.";
                                JOptionPane.showMessageDialog(null, message, "Toast", JOptionPane.INFORMATION_MESSAGE);
                                return;
                            }
                        }
                    } else {
                        String message = "Tiene elementos pendiente de evaluacion.";
                        JOptionPane.showMessageDialog(null, message, "Toast", JOptionPane.INFORMATION_MESSAGE);
                        return;
                    }
                }
            } else {
                String message = "Tiene elementos pendiente de evaluacion.";
                JOptionPane.showMessageDialog(null, message, "Toast", JOptionPane.INFORMATION_MESSAGE);
                return;
            }
        }

        int cant = Frm_Principal.archivo.getListaEvaluacionNivelMadurez().size();

        int VC = jComboBox_valoracion_concluida_nivel_marudez.getSelectedIndex();

        evaluacion_Nivel_Madurez = new Evaluacion_Nivel_Madurez(cant + 1, jLabel_titulo.getText(), jTextArea_descripcion.getText(), VC);
        Frm_Principal.archivo.getListaEvaluacionNivelMadurez().add(evaluacion_Nivel_Madurez);
        nivel_Madurez.setId_evaluacion_nivel_madurez(cant + 1);

        System.out.println("INNN:" + nivel_Madurez.getId_evaluacion_nivel_madurez());
        System.out.println("pu:" + (VariablesGoblales.puntero - 1));
        marcarNodoRecursivamente(nivel_Madurez.getNombre_nivel_madurez());
    }//GEN-LAST:event_jButton1ActionPerformed

    private void marcarNodoRecursivamente(String textoNodo) {
        DefaultMutableTreeNode raiz = (DefaultMutableTreeNode) Frm_Principal.jTree_Arbol.getModel().getRoot();
        DefaultMutableTreeNode nodo = buscarNodo(raiz, textoNodo);
        if (nodo != null) {
            nodo.setUserObject("âœ…" + nodo.getUserObject());
            ((DefaultTreeModel) Frm_Principal.jTree_Arbol.getModel()).nodeChanged(nodo);
        }
    }

    private DefaultMutableTreeNode buscarNodo(DefaultMutableTreeNode raiz, String textoNodo) {
        TreePath selectedPath = new TreePath(raiz.getPath());
        boolean isSelected = Frm_Principal.jTree_Arbol.isPathSelected(selectedPath);
        System.out.println("sw=" + isSelected);
        if ((raiz.getUserObject().toString().equals(textoNodo)) && isSelected) {
            return raiz;
        } else {
            for (int i = 0; i < raiz.getChildCount(); i++) {
                DefaultMutableTreeNode encontrado = buscarNodo((DefaultMutableTreeNode) raiz.getChildAt(i), textoNodo);
                if (encontrado != null) {
                    return encontrado;
                }
            }
            return null;
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    public static javax.swing.JComboBox<String> jComboBox_valoracion_concluida_nivel_marudez;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    public static javax.swing.JLabel jLabel_titulo;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    public static javax.swing.JTextArea jTextArea_descripcion;
    // End of variables declaration//GEN-END:variables
}
