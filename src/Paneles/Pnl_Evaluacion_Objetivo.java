/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Paneles;

import Negocio.Evaluacion_Objetivo;
import Negocio.Instancia;
import Negocio.Objetivo;
import Negocio.Practica;
import Negocio.VariablesGoblales;
import Presentacion.Frm_Principal;
import javax.swing.JOptionPane;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreePath;

/**
 *
 * @author Usuario
 */
public class Pnl_Evaluacion_Objetivo extends javax.swing.JPanel {

    public Objetivo o;

    public Evaluacion_Objetivo eo;

    /**
     * Creates new form Pnl_home
     */
    public Pnl_Evaluacion_Objetivo() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel_titulo = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea_descripcion = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jComboBox_valoracion_dugerida = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jComboBox_valoracion_elegida = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea_justificaicon = new javax.swing.JTextArea();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setText("Evaluacion  de Objetivo");
        jPanel2.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(157, 8, 194, -1));

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 520, 30));

        jLabel_titulo.setForeground(new java.awt.Color(0, 0, 0));
        jLabel_titulo.setText("Objetivo Especifico# : titulo");
        jPanel1.add(jLabel_titulo, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 50, 320, -1));

        jTextArea_descripcion.setColumns(20);
        jTextArea_descripcion.setRows(5);
        jScrollPane1.setViewportView(jTextArea_descripcion);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 80, 490, 170));

        jLabel1.setForeground(new java.awt.Color(0, 0, 0));
        jLabel1.setText("Valoracion elegida:");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 270, -1, -1));

        jComboBox_valoracion_dugerida.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "SATISFECHA", "INSATISFECHA" }));
        jPanel1.add(jComboBox_valoracion_dugerida, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 260, 140, 30));

        jButton1.setText("Aceptar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 400, 110, -1));

        jLabel3.setForeground(new java.awt.Color(0, 0, 0));
        jLabel3.setText("Valoracion sugerida:");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 270, -1, -1));

        jComboBox_valoracion_elegida.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "SATISFECHA", "INSATISFECHA" }));
        jPanel1.add(jComboBox_valoracion_elegida, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 260, 130, 30));

        jLabel4.setForeground(new java.awt.Color(0, 0, 0));
        jLabel4.setText("Justificacion:");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 320, -1, -1));

        jTextArea_justificaicon.setColumns(20);
        jTextArea_justificaicon.setRows(5);
        jScrollPane2.setViewportView(jTextArea_justificaicon);

        jPanel1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 300, 410, 80));

        add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 520, 440));
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        for (int i = 0; i < o.getListaPracticas().size(); i++) {
            Practica practica = o.getListaPracticas().get(i);
            if(practica.getId_evaluacion_practiva()!=0){
            for (int j = 0; j < practica.getListaInstancia().size(); j++) {
                Instancia instancia = practica.getListaInstancia().get(j);
                if (instancia.getId_evaluacion_practica() == 0) {
                    String message = "Tiene elementos pendiente de evaluacion.";
                    JOptionPane.showMessageDialog(null, message, "Toast", JOptionPane.INFORMATION_MESSAGE);
                    return;
                }
            }
           
        }else{
                
               String message = "Tiene elementos pendiente de evaluacion.";
                    JOptionPane.showMessageDialog(null, message, "Toast", JOptionPane.INFORMATION_MESSAGE);
                    return; 
            }
        }

        int cant = Frm_Principal.archivo.getListaEvaluacionObjetivos().size();
        int VS = jComboBox_valoracion_dugerida.getSelectedIndex();
        int VE = jComboBox_valoracion_elegida.getSelectedIndex();
        String justificacion = jTextArea_justificaicon.getText();
        eo = new Evaluacion_Objetivo(cant + 1, jLabel_titulo.getText(), jTextArea_descripcion.getText(), VS, VE, justificacion);
        Frm_Principal.archivo.getListaEvaluacionObjetivos().add(eo);
        o.setId_evaluacion_objetivo(cant + 1);
        marcarNodoRecursivamente(o.getNombre_objetivo());
    }//GEN-LAST:event_jButton1ActionPerformed
    private void marcarNodoRecursivamente(String textoNodo) {
        DefaultMutableTreeNode raiz = (DefaultMutableTreeNode) Frm_Principal.jTree_Arbol.getModel().getRoot();
        DefaultMutableTreeNode nodo = buscarNodo(raiz, textoNodo);
        if (nodo != null) {
            nodo.setUserObject("✅" + nodo.getUserObject());

            ((DefaultTreeModel) Frm_Principal.jTree_Arbol.getModel()).nodeChanged(nodo);
        }
    }

    private DefaultMutableTreeNode buscarNodo(DefaultMutableTreeNode raiz, String textoNodo) {
        TreePath selectedPath = new TreePath(raiz.getPath());
        boolean isSelected = Frm_Principal.jTree_Arbol.isPathSelected(selectedPath);
        System.out.println("sw=" + isSelected);

        if ((raiz.getUserObject().toString().equals(textoNodo)) && isSelected) {
            return raiz;
        } else {
            for (int i = 0; i < raiz.getChildCount(); i++) {
                DefaultMutableTreeNode encontrado = buscarNodo((DefaultMutableTreeNode) raiz.getChildAt(i), textoNodo);
                if (encontrado != null) {
                    return encontrado;
                }
            }
            return null;
        }
    }
    
    
    
     private void marcarNodoRecursivamentex(String textoNodo) {
        DefaultMutableTreeNode raiz = (DefaultMutableTreeNode) Frm_Principal.jTree_Arbol.getModel().getRoot();
        DefaultMutableTreeNode nodo = buscarNodo(raiz, textoNodo);
        if (nodo != null) {
            nodo.setUserObject("✅" + nodo.getUserObject());

            ((DefaultTreeModel) Frm_Principal.jTree_Arbol.getModel()).nodeChanged(nodo);
        }
    }

    private DefaultMutableTreeNode buscarNodox(DefaultMutableTreeNode raiz, String textoNodo) {
        TreePath selectedPath = new TreePath(raiz.getPath());
        boolean isSelected = Frm_Principal.jTree_Arbol.isPathSelected(selectedPath);
        System.out.println("sw=" + isSelected);

        if ((raiz.getUserObject().toString().equals(textoNodo)) && isSelected) {
            return raiz;
        } else {
            for (int i = 0; i < raiz.getChildCount(); i++) {
                DefaultMutableTreeNode encontrado = buscarNodo((DefaultMutableTreeNode) raiz.getChildAt(i), textoNodo);
                if (encontrado != null) {
                    return encontrado;
                }
            }
            return null;
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    public static javax.swing.JComboBox<String> jComboBox_valoracion_dugerida;
    private javax.swing.JComboBox<String> jComboBox_valoracion_elegida;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    public static javax.swing.JLabel jLabel_titulo;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    public static javax.swing.JTextArea jTextArea_descripcion;
    private javax.swing.JTextArea jTextArea_justificaicon;
    // End of variables declaration//GEN-END:variables
}
